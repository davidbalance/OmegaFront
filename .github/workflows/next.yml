name: Docker Image Deployment
on:
  push:
    branches:
      - develop

jobs:
  build_and_push_docker_image:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["22.x"]
    env:
      NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      NEXT_PUBLIC_API_KEY: ${{ secrets.NEXT_PUBLIC_API_KEY }}
      NEXT_PUBLIC_ROOT_API: ${{ secrets.NEXT_PUBLIC_ROOT_API }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create temporary env file
        run: |
          echo "NEXTAUTH_URL=$NEXTAUTH_URL" >> .env
          echo "NEXTAUTH_SECRET=$NEXTAUTH_SECRET" >> .env
          echo "NEXT_PUBLIC_API_KEY=$NEXT_PUBLIC_API_KEY" >> .env
          echo "NEXT_PUBLIC_ROOT_API=$NEXT_PUBLIC_ROOT_API" >> .env

      - name: Build docker image
        run: docker build -t ${{ secrets.DOCKER_IMAGE }} .
        working-directory: .

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_IMAGE }}

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_docker_image
    strategy:
      fail-fast: false

    steps:
      - name: Check Repository
        uses: actions/checkout@v4

      # - name: SSH into server and backup database
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.SERVER_HOST }}
      #     username: ${{ secrets.SERVER_USERNAME }}
      #     password: ${{ secrets.SERVER_PASSWORD }}
      #     script: |
      #       docker exec ${{ secrets.MYSQL_CONTAINER_NAME }} bash -c "mysqldump --no-create-info -u ${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} ${{ secrets.MYSQL_DATABASE }} > /backup/backup_$(date +%F_%T).sql"

      - name: SSH into server and deploy application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd ${{ secrets.DOCKER_COMPOSE_DIRECTORY }}
            docker-compose stop ${{ secrets.DOCKER_SERVICE }} || true
            docker-compose rm -f ${{ secrets.DOCKER_SERVICE }}
            docker-compose up -d --build ${{ secrets.DOCKER_SERVICE }}
